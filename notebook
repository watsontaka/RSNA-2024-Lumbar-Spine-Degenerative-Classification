{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":71549,"databundleVersionId":8561470,"sourceType":"competition"},{"sourceId":9529005,"sourceType":"datasetVersion","datasetId":5471909},{"sourceId":193672256,"sourceType":"kernelVersion"},{"sourceId":200041870,"sourceType":"kernelVersion"},{"sourceId":201331469,"sourceType":"kernelVersion"},{"sourceId":201335825,"sourceType":"kernelVersion"},{"sourceId":201335916,"sourceType":"kernelVersion"}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install --no-index ../input/natsort/natsort-8.4.0-py3-none-any.whl --find-links=../input/natsort","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:15:50.466089Z","iopub.execute_input":"2024-10-04T15:15:50.466829Z","iopub.status.idle":"2024-10-04T15:16:04.602785Z","shell.execute_reply.started":"2024-10-04T15:15:50.466794Z","shell.execute_reply":"2024-10-04T15:16:04.601641Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\nimport glob\nimport pydicom\nimport cv2\nfrom natsort import natsorted\nfrom statistics import mean\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import *\nimport tensorflow.keras.backend as K","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-04T15:16:04.605134Z","iopub.execute_input":"2024-10-04T15:16:04.605420Z","iopub.status.idle":"2024-10-04T15:16:22.681391Z","shell.execute_reply.started":"2024-10-04T15:16:04.605393Z","shell.execute_reply":"2024-10-04T15:16:22.680564Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"DEBUG = False\nif DEBUG == True:\n    base_dir = '/kaggle/input/rsna-lsdc-2024-submission-debug-dataset/debug/'\nelse:\n    base_dir = '/kaggle/input/rsna-2024-lumbar-spine-degenerative-classification/'","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:16:22.682447Z","iopub.execute_input":"2024-10-04T15:16:22.682972Z","iopub.status.idle":"2024-10-04T15:16:22.687516Z","shell.execute_reply.started":"2024-10-04T15:16:22.682947Z","shell.execute_reply":"2024-10-04T15:16:22.686505Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv(base_dir + 'test_series_descriptions.csv')\ndf = df.astype({'study_id':'str','series_id':'str'})\ndf","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:16:22.688766Z","iopub.execute_input":"2024-10-04T15:16:22.689039Z","iopub.status.idle":"2024-10-04T15:16:22.753876Z","shell.execute_reply.started":"2024-10-04T15:16:22.689017Z","shell.execute_reply":"2024-10-04T15:16:22.753058Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"scs_model = keras.models.load_model('/kaggle/input/efficientnet-training-model/scs_model.h5')\nnfn_model = keras.models.load_model('/kaggle/input/efficientnet-training-model/nfn_model.h5')\nss_model = keras.models.load_model('/kaggle/input/efficientnet-training-model/ss_model.h5')\n\nextract_scs = keras.models.load_model('/kaggle/input/extraction-spinal-canal-densenet/scs_extraction_model.h5')\nextract_nfn = keras.models.load_model('/kaggle/input/extraction-neural-foraminal-densenet/nfn_extraction_model.h5')\nextract_ss = keras.models.load_model('/kaggle/input/extraction-subarticular-stenosis-densenet/ss_extraction_model.h5')","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:16:22.756365Z","iopub.execute_input":"2024-10-04T15:16:22.756648Z","iopub.status.idle":"2024-10-04T15:16:28.250229Z","shell.execute_reply.started":"2024-10-04T15:16:22.756625Z","shell.execute_reply":"2024-10-04T15:16:28.249386Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def replace_pred(description,box):\n    \n    if d == 'Sagittal T2/STIR':\n        matrix = np.full((5,3),0.3333, dtype=np.float32)\n        box.append(matrix)\n    else:\n        matrix = np.full((10,3),0.3333, dtype=np.float32)\n        box.append(matrix)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:16:28.251751Z","iopub.execute_input":"2024-10-04T15:16:28.252058Z","iopub.status.idle":"2024-10-04T15:16:28.257359Z","shell.execute_reply.started":"2024-10-04T15:16:28.252033Z","shell.execute_reply":"2024-10-04T15:16:28.256360Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def SagittalT2_predict(files):\n\n    image = []\n    \n    for f in files:\n        \n        dcm = pydicom.dcmread(f)\n        dcm = dcm.pixel_array\n        dcm = (dcm - dcm.min()) / (dcm.max() - dcm.min() + 1e-6)*255.0\n        dcm = dcm / 255.0\n        dcm = cv2.resize(dcm,(224,224))\n        image.append(dcm)\n\n    pred_image = np.array(image)\n    pred = extract_scs.predict(pred_image,verbose=0)\n    rank = np.sort(pred[:,1])\n    image_slice = np.where(pred[:,1] >= rank[-1])[0].tolist()[0]\n    eximage = image[image_slice]\n\n    condition_pred = scs_model.predict(eximage[np.newaxis,:,:,np.newaxis],verbose=0)\n\n    return np.array(condition_pred).squeeze()","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:16:28.258579Z","iopub.execute_input":"2024-10-04T15:16:28.258932Z","iopub.status.idle":"2024-10-04T15:16:28.273716Z","shell.execute_reply.started":"2024-10-04T15:16:28.258887Z","shell.execute_reply":"2024-10-04T15:16:28.273043Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def SagittalT1_predict(files):\n    \n    if len(files) < 4:\n        return np.full((10,3),0.33333,dtype=np.float32)\n        \n    else:\n            \n        left_images = []\n        right_images = []\n\n        average = []\n\n        for f in files:\n                \n            dcm = pydicom.dcmread(f)\n            average.append(dcm[(0x0020, 0x0032)][0])\n\n        means = mean(average)\n\n        for f in files:\n                \n            dcm = pydicom.dcmread(f)\n            position = dcm[(0x0020, 0x0032)][0]\n            dcm = dcm.pixel_array\n            dcm = (dcm - dcm.min()) / (dcm.max() - dcm.min() + 1e-6)*255.0\n            dcm = dcm / 255.0\n            dcm = cv2.resize(dcm,(224,224))\n\n            if means < position:\n                    \n                left_images.append(dcm)\n\n            elif means > position:\n                    \n                right_images.append(dcm)\n\n        predleft_images = np.array(left_images)[:,:,:,np.newaxis]\n        predright_images = np.array(right_images)[:,:,:,np.newaxis]\n        left_pred = extract_nfn.predict(predleft_images,verbose=0)\n        right_pred = extract_nfn.predict(predright_images,verbose=0)\n\n        left_rank = np.sort(left_pred[:,1])\n        left_slice = np.where(left_pred[:,1] >= left_rank[-2])[0].tolist()\n        right_rank = np.sort(right_pred[:,1])\n        right_slice = np.where(right_pred[:,1] >= right_rank[-2])[0].tolist()\n\n        left_list = []\n            \n        for ls in left_slice:\n                \n            im = left_images[ls]\n            left_list.append(im)\n\n        right_list = []\n            \n        for rs in right_slice:\n                \n            im = right_images[rs]\n            right_list.append(im)\n\n        left = np.array(left_list).transpose(1,2,0)[np.newaxis,:,:,:]\n        right = np.array(right_list).transpose(1,2,0)[np.newaxis,:,:,:]\n\n        condition_pred = nfn_model.predict([left,right],verbose=0)\n        left = condition_pred[0].squeeze()\n        right = condition_pred[1].squeeze()\n\n        return np.concatenate((left, right), axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:16:28.274846Z","iopub.execute_input":"2024-10-04T15:16:28.275147Z","iopub.status.idle":"2024-10-04T15:16:28.291526Z","shell.execute_reply.started":"2024-10-04T15:16:28.275123Z","shell.execute_reply":"2024-10-04T15:16:28.290820Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def AxialT2_predict(files):\n    \n    if len(files) < 10:\n        return np.full((10,3),0.33333,dtype=np.float32)\n    \n    else:\n        \n        image = []\n        \n        for f in files:\n            \n            dcm = pydicom.dcmread(f)\n            dcm = dcm.pixel_array\n            dcm = (dcm - dcm.min()) / (dcm.max() - dcm.min() + 1e-6)*255.0\n            dcm = dcm / 255.0\n            dcm = cv2.resize(dcm,(224,224))\n            image.append(dcm)\n            \n        pred_image = np.array(image)[:,:,:,np.newaxis]\n        pred = extract_ss.predict(pred_image,verbose=0)\n        rank = np.sort(pred[:,1])\n        image_slice = np.where(pred[:,1] >= rank[-10])[0].tolist()\n\n        exim = []\n        \n        for sl in image_slice:\n            \n            eximage = image[sl]\n            exim.append(eximage)\n\n        exim = np.array(exim).transpose(1,2,0)[np.newaxis,:,:,:]\n        condition_pred = ss_model.predict(exim,verbose=0)\n        left = condition_pred[0].squeeze()\n        right = condition_pred[1].squeeze()\n        return np.concatenate((left, right), axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:16:28.292628Z","iopub.execute_input":"2024-10-04T15:16:28.292963Z","iopub.status.idle":"2024-10-04T15:16:28.308005Z","shell.execute_reply.started":"2024-10-04T15:16:28.292934Z","shell.execute_reply":"2024-10-04T15:16:28.307082Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# sutdy_id 抽出\nstudy_id = df['study_id'].unique()\ndescription_list = ['Sagittal T2/STIR','Sagittal T1','Axial T2']\n\nlabel_list = ['spinal_canal_stenosis_l1_l2',\n              'spinal_canal_stenosis_l2_l3',\n              'spinal_canal_stenosis_l3_l4',\n              'spinal_canal_stenosis_l4_l5',\n              'spinal_canal_stenosis_l5_s1',\n              'left_neural_foraminal_narrowing_l1_l2',\n              'left_neural_foraminal_narrowing_l2_l3',\n              'left_neural_foraminal_narrowing_l3_l4',\n              'left_neural_foraminal_narrowing_l4_l5',\n              'left_neural_foraminal_narrowing_l5_s1',\n              'right_neural_foraminal_narrowing_l1_l2',\n              'right_neural_foraminal_narrowing_l2_l3',\n              'right_neural_foraminal_narrowing_l3_l4',\n              'right_neural_foraminal_narrowing_l4_l5',\n              'right_neural_foraminal_narrowing_l5_s1',\n              'left_subarticular_stenosis_l1_l2',\n              'left_subarticular_stenosis_l2_l3',\n              'left_subarticular_stenosis_l3_l4',\n              'left_subarticular_stenosis_l4_l5',\n              'left_subarticular_stenosis_l5_s1',\n              'right_subarticular_stenosis_l1_l2',\n              'right_subarticular_stenosis_l2_l3',\n              'right_subarticular_stenosis_l3_l4',\n              'right_subarticular_stenosis_l4_l5',\n              'right_subarticular_stenosis_l5_s1']\n\nlists = []\n\n# study_id を繰り返し\nfor st in study_id:\n\n    study_df = df[df['study_id']==st]\n    study_label = st + '_' + pd.DataFrame(label_list, columns=['row_id'])\n    pred_list = []\n    # description　を繰り返し\n    for d in description_list:\n        description = study_df[study_df['series_description']==d]\n\n        # dataframe に該当の description があるかないかで分岐\n        if description.shape[0] == 0:\n            \n            replace_pred(d, pred_list)\n            \n        else:\n            \n            nplists = []\n            lens = len(description)\n\n            # description の数を繰り返し\n            for dl in range(lens):\n                \n                study = description.iloc[dl,0]\n                series = description.iloc[dl,1]\n                path = os.path.join(base_dir, 'test_images/', study, series)\n\n                # 該当のディレクトリがあるかないかで分岐\n                isdir = os.path.isdir(path)\n                \n                if isdir == False:\n\n                    replace_pred(d,nplists)\n                    \n                else:\n                    \n                    files = natsorted(glob.glob(path + '/*.dcm'))\n                    if d == 'Sagittal T2/STIR':\n                        sagittalt2_pred = SagittalT2_predict(files)\n                        nplists.append(sagittalt2_pred)\n                    elif d == 'Sagittal T1':\n                        sagittalt1_pred = SagittalT1_predict(files)\n                        nplists.append(sagittalt1_pred)\n                    elif d == 'Axial T2':\n                        axialt2_pred = AxialT2_predict(files)\n                        nplists.append(axialt2_pred)\n                    \n            sums = np.sum(nplists,axis=0)/lens\n            pred_list.append(sums)\n    predict = pd.DataFrame(np.concatenate(pred_list,axis=0), columns=['normal_mild','moderate','severe'])\n    create_df = pd.concat([study_label,predict],axis=1)\n    lists.append(create_df)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:16:28.309347Z","iopub.execute_input":"2024-10-04T15:16:28.309872Z","iopub.status.idle":"2024-10-04T15:17:00.800894Z","shell.execute_reply.started":"2024-10-04T15:16:28.309841Z","shell.execute_reply":"2024-10-04T15:17:00.799774Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.set_option('display.max_rows', None)\npred = pd.concat(lists,axis=0)\nsubmit = pred.reset_index(drop=True)\nsubmit","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:17:00.802478Z","iopub.execute_input":"2024-10-04T15:17:00.802777Z","iopub.status.idle":"2024-10-04T15:17:00.819230Z","shell.execute_reply.started":"2024-10-04T15:17:00.802751Z","shell.execute_reply":"2024-10-04T15:17:00.818212Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submit.to_csv('/kaggle/working/submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T15:17:00.820551Z","iopub.execute_input":"2024-10-04T15:17:00.820962Z","iopub.status.idle":"2024-10-04T15:17:00.835016Z","shell.execute_reply.started":"2024-10-04T15:17:00.820925Z","shell.execute_reply":"2024-10-04T15:17:00.834191Z"},"trusted":true},"outputs":[],"execution_count":null}]}